/**********************	Ship Control *** *******************//* Notes:** This class controls everything to do with the ships*/package com{	/* 	Sources that helped me with this script		http://www.emanueleferonato.com/2008/06/11/step-by-step-as3-translation-of-flash-game-creation-tutorial-part-1/				Helped with my initial understanding of movement using triganometry (before we covered it in class)		http://asgamer.com/2009/as3-character-movement-asteroids-style-360-degree-movement				Helped with giving my laser a delay timer		http://asgamer.com/2009/as3-flash-games-for-beginners-firing-weapons-with-delays	*/		// Import flash classes	import flash.display.Stage;	import flash.display.MovieClip;	import flash.display.Graphics;	import flash.ui.Keyboard;	import flash.media.Sound;	import flash.events.KeyboardEvent;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.utils.Timer;	// Import my classes	import com.Utilities;	// Constructor	public class ShipControl extends MovieClip {		// General variables		private var utils:Utilities = new Utilities;		private var stageRef:Stage;		// Class specific variables		public var laserArray:Array = new Array();		// Restrict variable access (private) to this class only		// Speed/velocity variables		private var speed:Number = 0.5;		private var xVelocity:Number = 0;		private var yVelocity:Number = 0;		// Add friction to slow down ship if up key isn't pressed		private var friction:Number = 0.95;		// Initial ship rotation		private var initialDegree:Number = 0;		// The number of degrees to rotate each frame		private var rotateDegree:Number = 10;		// Ship max speed		private var shipMaxSpeed:Number = 6;		// Set the stage bleed (in pixels)		private var shipStageBleed:int = 20;		// Game related variables		private var gameLevel:uint = 2;		// User input variables		// Initially set all keyboard variables to false		// True = pressed / False = released		private var keyArrowLeft:Boolean = false;		private var keyArrowRight:Boolean = false;		private var keyArrowUp:Boolean = false;		private var keyArrowDown:Boolean = false;		private var keySpace:Boolean = false;		// Ship movie clip		public var myShip:MovieClip;				// Fire/Laser specific variables		// Source: http://asgamer.com/2009/as3-flash-games-for-beginners-firing-weapons-with-delays		private var fireTimer:Timer; //causes delay between fires		private var canFire:Boolean = true; //can you fire a laser		// My modifications...		// Laser ID for easy reference		private var laserId:int;		// Set up the delay for the laser		private var laserDelay:uint = 200;		// Set up the constructor		public function ShipControl(stageRef:Stage):void{			// Reference stage			this.stageRef = stageRef;			// Create instance of movie clip			myShip = new ShipMC();			myShip.name = 'MyShip';			// Stop animation			myShip.stop();			// Add to display object list			stageRef.addChild(myShip);			// Setup your fireTimer and attach a listener to it.			// Source: http://asgamer.com/2009/as3-flash-games-for-beginners-firing-weapons-with-delays			fireTimer = new Timer(laserDelay, 1);			fireTimer.addEventListener(TimerEvent.TIMER, fireTimerHandler, false, 0, true);		}				// Setup keyboard listeners		public function shipListerners():void{			stage.addEventListener(KeyboardEvent.KEY_UP,keyReleased);			stage.addEventListener(KeyboardEvent.KEY_DOWN,keyPressed);		}				// Scale and place ship		public function shipPlacement():void{			myShip.scaleX = 0.4;			myShip.scaleY = 0.4;			myShip.x = stage.stageWidth/2;			myShip.y = stage.stageHeight/2;		}				// Put all the calculations to good use and move the ship		public function shipMovement():void{			// Check and limit velocity if needed			// If x-velocity is greater than max speed, set it to max speed			if(xVelocity > shipMaxSpeed)				xVelocity = shipMaxSpeed;			// If x-velocity is greater than - max speed, set it to - max speed			if(xVelocity < -shipMaxSpeed)				xVelocity = -shipMaxSpeed;			// If y-velocity is greater than max speed, set it to max speed			if(yVelocity > shipMaxSpeed)				yVelocity = shipMaxSpeed;			// If y-velocity is greater than - max speed, set it to - max speed			if(yVelocity < -shipMaxSpeed)				yVelocity = -shipMaxSpeed; 						// Set location of ship			myShip.x += xVelocity;			myShip.y += yVelocity;						// Set initial rotation of ship			myShip.rotation = initialDegree;		}				// Check location of ship on the stage		public function shipLocation():void{			// If ship goes of right hand side of stage, place on left side			if(myShip.x > stage.stageWidth + shipStageBleed)				myShip.x = -shipStageBleed;							// If ship goes of left hand side of stage, place on right side			if(myShip.x < -shipStageBleed)				myShip.x = stage.stageWidth + shipStageBleed;							// If ship goes of bottom side of stage, place on top side			if(myShip.y > stage.stageHeight + shipStageBleed)				myShip.y = -shipStageBleed;							// If ship goes of top hand side of stage, place on bottom side			if(myShip.y < -shipStageBleed)				myShip.y = stage.stageHeight +shipStageBleed;		}				// A loop function to check when a key is pressed		private function keyPressed(event:KeyboardEvent):void{			switch(event.keyCode) {				// If left arrow key is pressed..				case Keyboard.LEFT:				keyArrowLeft = true;				break;				// If right arrow key is pressed..				case Keyboard.RIGHT:				keyArrowRight = true;				break;				// If up arrow key is pressed..				case Keyboard.UP:				keyArrowUp = true;				break;				// If down arrow key is pressed..				case Keyboard.DOWN:				keyArrowDown = true;				break;				// If space bar is released..				case Keyboard.SPACE:				keySpace = true;				break;			}		}		 		// A loop function to check when a key is released		private function keyReleased(event:KeyboardEvent){			switch(event.keyCode) {				// If left arrow key is released..				case Keyboard.LEFT:				keyArrowLeft = false;				break;				// If right arrow key is released..				case Keyboard.RIGHT:				keyArrowRight = false;				break;				// If up arrow key is released..				case Keyboard.UP:				keyArrowUp = false;				break;				// If down arrow key is released..				case Keyboard.DOWN:				keyArrowDown = false;				break;				// If space bar is released..				case Keyboard.SPACE:				keySpace = false;				break;			}		}				// Check which keys are true (i.e. have been pressed this frame)		public function checkKeys(){			//Note: Flash places 0 degrees along the x axis, facing right			// Rotate the ship a specified amount of degrees anti-clockwise			if(keyArrowLeft)				initialDegree -= rotateDegree;			// Rotate the ship a specified amount of degrees clockwise			if(keyArrowRight)				initialDegree += rotateDegree;			// Increase vertical and horizontal velocity			if(keyArrowUp){				// Trigonometry ARGH!! Take ship rotation into account, calculate radians from degrees				yVelocity += Math.sin(utils.degToRad(myShip.rotation)) * speed;				xVelocity += Math.cos(utils.degToRad(myShip.rotation)) * speed;				// Stop at frame 2 of thrust animation				myShip.gotoAndStop(2);			}			else{				// Stop at frame 1 of thrust animation				myShip.gotoAndStop(1);				yVelocity *= friction;				xVelocity *= friction;			}						// If space is true...			if(keySpace){				//if canFire is true, fire a bullet				//set canFire to false and start our timer				//else do nothing.				if (canFire){					// Create new instance of laser sound					var laserSound:LaserSound=new LaserSound; 					// Play laser sound					laserSound.play();					// Create new instance of laser class					var laserClass:LaserControl = new LaserControl(stageRef,myShip);					// Give instance name laserClass					laserClass.name = 'LaserClass';					// Add to display list					addChild(laserClass);					// Add to laser class array					laserArray.push(laserClass);					// Set boolean to false and start fire timer					canFire = false;					fireTimer.start();				}			}		}				// A function to destroy laser		public function destroyLaserClass(laserClass:Object){			// Remove the laser class and it's children (the laser) from display object list			laserClass.removeChildAt(0);			removeChild(LaserControl(laserClass));			laserClass.removeLaser();		}				// Set variable to true so we can fire (is run every 200)		private function fireTimerHandler(event:TimerEvent):void{			//timer ran, we can fire again.			canFire = true;		}	}}