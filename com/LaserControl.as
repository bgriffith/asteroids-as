/***********************	Laser Control *** ********************//* Notes:** This class controls everything to do with lasers*/package com{	// Import flash classes	import flash.display.*;	import flash.events.Event;	// Import my classes	import com.Utilities;		// Extend a sprite since we don't need multiple frames	public class LaserControl extends Sprite {		// General variables		private var stageRef:Stage;		private var utils:Utilities=new Utilities;		// Class specific variables		private var laser:Sprite;		private var laserXVelocity:Number=0;		private var laserYVelocity:Number=0;		private var laserSpeed:Number=10;		private var laserAngle:Number=0;		private var laserRemove:Boolean = false;		private var laserStageBleed:uint = 2;		private var maxDistance:uint = 30;		private var distanceCounter:uint = 0;		// Ship object		private var myShip:Object;			// Constructor		public function LaserControl(stageRef:Stage,ship:Object){			this.stageRef = stageRef;			// Assign passed in ship object			myShip = ship;			// Create new laser sprite object			laser = new Sprite();			// Name the instance			laser.name='LaserSprite';			// Add to sprite object to display list			addChild(laser);			// Draw laser			drawLaser();			// Add listener - do laserLoop at each frame			this.addEventListener(Event.ENTER_FRAME,laserLoop,false,0,true);		}				// Draw laser		private function drawLaser():void{			// Create laser			laser.graphics.lineStyle(1, 0xFFFFFF);			laser.graphics.lineTo(0, 0);			laser.graphics.lineTo(0, 5);			laser.rotation=myShip.rotation+90;			// Angle of ship when laser was fired			laserAngle=myShip.rotation;			// Set x/y velocity of laser			laserYVelocity=Math.sin(utils.degToRad(myShip.rotation));			laserXVelocity=Math.cos(utils.degToRad(myShip.rotation));			// Set position of laser			laser.y = myShip.y + (laserYVelocity*15);			laser.x = myShip.x + (laserXVelocity*15);		}				// Loop this fucntion every frame		private function laserLoop(event:Event){			// If laser goes of right hand side of stage, place on left side			if(laser.x > stageRef.stageWidth + laserStageBleed)				laser.x = -laserStageBleed;							// If laser goes of left hand side of stage, place on right side			if(laser.x < -laserStageBleed)				laser.x = stageRef.stageWidth + laserStageBleed;							// If laser goes of bottom side of stage, place on top side			if(laser.y > stageRef.stageHeight + laserStageBleed)				laser.y = -laserStageBleed;							// If laser goes of top hand side of stage, place on bottom side			if(laser.y < -laserStageBleed)				laser.y = stageRef.stageHeight + laserStageBleed;					if(distanceCounter > maxDistance)				removeLaser(laser);						else {				// Keep moving the laser				laser.y+=laserYVelocity*laserSpeed;				laser.x+=laserXVelocity*laserSpeed;			}			distanceCounter++;		}		// Remove laser check		public function removeLaser(laserObj:Object = null):void {			// Gives me a proper big headache			if(laserObj)				removeChild(laser);			// Remove loop			removeEventListener(Event.ENTER_FRAME, laserLoop);		}	}}