/**************************	Asteroid Control *** ***********************//* Notes:** This class controls everything to do with the creation, destruction and movement of asteroids*/package com {	// Import flash classes	import flash.geom.*;	import flash.display.Stage;	import flash.display.Sprite;	import flash.events.*;	// Import my classes	import com.Utilities;		// Extend a sprite since we don't need multiple frames	public class AsteroidControl extends Sprite {		// General variables		private var utils:Utilities = new Utilities;		private var stageRef:Stage;		// Game control variables		// NOT FULLY IMPLEMENT YET		private var gameLevel:uint;		// Class specific variables		public var asteroidArray:Array = new Array();		private var asteroidTotal:uint = 4;		private var asteroidSpeedMultiplier:Number = 0;		private var asteroidMinSpeed:Number = 0.8;		private var asteroidLevel2Total:uint = 2;		private var asteroidLevel3Total:uint = 4;				// Constructor		public function AsteroidControl(stageRef:Stage,gameLevel:uint):void{			// Reference stage			this.stageRef = stageRef;						this.gameLevel = gameLevel;						// Check game level and set appropriate variables			checkLevel(gameLevel);			// Create initial asteroids			for(var i:uint = 0; i < asteroidTotal; i++){				asteroidPlacement(createAsteroid(1));			}			// Add to display object list			addRemoveAsteroid();		}				// A function to clear all asteroids from stage and view		public function clearAll():void{			// Loop through asteroid array			for(var i:int = 0; i < asteroidArray.length; i++){				// Remove objects from display object list				if(asteroidArray[i][6] == false)					stageRef.removeChild(Sprite(asteroidArray[i][0]));			}			// Reset array			asteroidArray = null;		}				// A function to check the level and to set variables according to the level specified		private function checkLevel(gameLevel:uint):void{			switch(gameLevel){				// If level 1..				case 1 :				// Increase number of asteroids				//asteroidTotal += 0;				// Increase possible speed range of asteroids				asteroidSpeedMultiplier += 1;				break;								// If Level 2..				case 2 :				// Increase number of asteroids				asteroidTotal += 2;				// Increase possible speed range of asteroids				asteroidSpeedMultiplier += 1.2;				break;								// If Level 2..				case 3 :				// Increase number of asteroids				asteroidTotal += 3;				// Increase possible speed range of asteroids				asteroidSpeedMultiplier += 1.4;				break;								// If Level 2..				case 4 :				// Increase number of asteroids				asteroidTotal += 4;				// Increase possible speed range of asteroids				asteroidSpeedMultiplier += 1.6;				break;				// Needs works, could be expanded further...			}		}				// A function which draws an asteroid using random coords and placement		// It's size depends on the value passed into the function		// It returns an asteroid object with an array of properties		private function createAsteroid(asteroidLevel:uint):Array{			// Create a new variable to store the asteroid ID			var id:int;			// If asteroid array is empty set ID of first asteroid to 0			if(!asteroidArray)				id = 0;			// Else set it the the length of the array - Will be one more than previous due to arrays starting at 0.. 			else				id = asteroidArray.length;			// Create new object			var asteroid:Sprite = new Sprite();			// Name the instance for easy reference			asteroid.name = 'asteroid'+id;						// Set asteroid properties			// Have the asteroind move at a random speed but also take into account the multiplier and minimum speed			var speed:Number = (Math.random() * asteroidSpeedMultiplier) + asteroidMinSpeed;			// Have the asteroid move with a random velocity along the x axis			var xVel:Number = Math.cos(utils.degToRad(Math.random()*360)) * speed;			// Have the asteroid move with a random velocity along the y axis			var yVel:Number = Math.sin(utils.degToRad(Math.random()*360)) * speed;			// Set the level of the asteroid (Effects the size, bleed, children etc)			var level:uint = asteroidLevel;			// Set a destroyed flag (We will be using this later on to work out which have asteroids in the array have been hit)			var destroyed:Boolean = false;			// Rotation angle (Not in current use)			var rotateAngle:Number = 0;			// The distance an asteroid can go off screen without it appearing on the other side (varies with level of asteroid)			var stageBleed:uint;			// Store asteroid object and its properties in a multidimensional array 			asteroidArray.push(new Array(asteroid,id,speed,xVel,yVel,level,destroyed,rotateAngle));						// Drawing the asteroid			// Use Math.random to add a bit of variation to the shape			// Calculate the coords			// Math.ceil(Math.random() * n) + j) Where n is the possible variation and j is where to start			var xCoord1:int = Math.ceil(Math.random()*15) + 40;			var xCoord2:int = Math.ceil(Math.random()*15) + 65;			var yCoord2:int = Math.ceil(Math.random()*15) + 6;			var xCoord3:int = Math.ceil(Math.random()*15) + 85;			var yCoord3:int = Math.ceil(Math.random()*15) + 22;			var xCoord4:int = Math.ceil(Math.random()) + 90;			var yCoord4:int = Math.ceil(Math.random()) + 50;			var xCoord5:int = Math.ceil(Math.random()*15) + 70;			var yCoord5:int = Math.ceil(Math.random()*15) + 80;			var xCoord6:int = Math.ceil(Math.random()) + 40;			var yCoord6:int = Math.ceil(Math.random()) + 90;			var xCoord7:int = Math.ceil(Math.random()*15) + 10;			var yCoord7:int = Math.ceil(Math.random()*15) + 75;			var xCoord8:int = Math.ceil(Math.random()) + 0;			var yCoord8:int = Math.ceil(Math.random()) + 40;			var xCoord9:int = Math.ceil(Math.random()*15) + 10;			var yCoord9:int = Math.ceil(Math.random()*15) + 5;						// Set line style			asteroid.graphics.lineStyle(1, 0xffffff);			// Draw asteroid with coords			asteroid.graphics.moveTo(xCoord1, 0);			asteroid.graphics.lineTo(xCoord2, yCoord2);			asteroid.graphics.lineTo(xCoord3, yCoord3);			asteroid.graphics.lineTo(xCoord4, yCoord4);			asteroid.graphics.lineTo(xCoord5, yCoord5);			asteroid.graphics.lineTo(xCoord6, yCoord6);			asteroid.graphics.lineTo(xCoord7, yCoord7);			asteroid.graphics.lineTo(xCoord8, yCoord8);			asteroid.graphics.lineTo(xCoord9, yCoord9);			asteroid.graphics.lineTo(xCoord1, 0);						// Set asteroid properties that are dependant on its level			switch(asteroidLevel){				case 1:				stageBleed = 90;				break;								case 2:				// Decrease it's size to half				asteroid.scaleX = 0.5;				asteroid.scaleY = 0.5;				// Set stage bleed - half the original				stageBleed = 90/2;				break;								case 3:				// Decrease it's size to 1/4 of the original				asteroid.scaleX = 0.25;				asteroid.scaleY = 0.25;				// Set stage bleed - 1/4 of the original				stageBleed = 90/4;				break;			}			// Add stage bleed to the array			asteroidArray[id].push(stageBleed);			// Return the asteroid array			return asteroidArray[id];		}				// Adds or removes an asteroid from the display list		public function addRemoveAsteroid(){			// Loop through each asteroid			for(var i:uint = 0; i < asteroidArray.length; i++){				// If asteroid's destroyed flag is true..				if(asteroidArray[i][6] == true){					// If object is on stage then remove it..					if(stage.contains(asteroidArray[i][0])){						// Check asteroid level						switch(asteroidArray[i][5]){												// If a level 1 (top level) asteroid has been hit then..							case 1:							for(var j:uint = 0; j < asteroidLevel2Total; j++){								// Create new asteroids - quantity dependant on variable passed to for loop								asteroidPlacement(createAsteroid(2),asteroidArray[i][0]);							}							break;							// If a level 2 asteroind has been hit then..							case 2:							for(var u:uint = 0; u < asteroidLevel3Total; u++){								// Create new asteroids - quantity dependant on variable passed to for loop								asteroidPlacement(createAsteroid(3),asteroidArray[i][0]);							}							break;						}						// Remove asteroid object from display object list						stageRef.removeChild(asteroidArray[i][0]);												// Create dust sprites						// Instantiate the dust class						var DustClass:DustControl = new DustControl(stageRef,asteroidArray[i][0]);						// Give instance name						DustClass.name = 'DustClass';						// Add to display list						stageRef.addChild(DustClass);											// Re-run function						addRemoveAsteroid();					}				}				// Else if destroyed flag is false..				else{					// Add asteroid object to display object list					stageRef.addChild(asteroidArray[i][0]);				}			}		}					// A function which sets the destroyed flag of an asteroid to true		public function destroyAsteroid(asteroidId:Number){			asteroidArray[asteroidId][6] = true;		}				// A function that manages the placement of asteroids 		public function asteroidPlacement(asteroid:Array, parentAsteroid:Object = null){			// If the asteroid is top level			if(parentAsteroid == null){				// Loop through top level asteroids				if(asteroid[1] == 0 || asteroid[1] == 4){					// Place in top left					asteroid[0].y = Math.ceil(Math.random()*10);					asteroid[0].x = Math.ceil(Math.random()*10);				}				else if(asteroid[1] == 1 || asteroid[1] == 5){					// Place in top right					asteroid[0].y = Math.ceil(Math.random()*10);					asteroid[0].x = Math.ceil(Math.random()*10)+stageRef.stageWidth-100;				}				else if (asteroid[1] == 2 || asteroid[1] == 6){					// Place in bottom right					asteroid[0].y = Math.ceil(Math.random()*10)+stageRef.stageHeight-100;					asteroid[0].x = Math.ceil(Math.random()*10)+stageRef.stageWidth-100;				}				else if(asteroid[1] == 3 || asteroid[1] == 7){					// Place in bottom left					asteroid[0].y = Math.ceil(Math.random()*10)+stageRef.stageHeight-100;					asteroid[0].x = Math.ceil(Math.random()*10)+10;				}				else {					// Place in top left					asteroid[0].y = Math.ceil(Math.random()*10);					asteroid[0].x = Math.ceil(Math.random()*10);				}			}			// Else if the asteroid is a child of another			else{				// Calculate the center of the parental asteroid				var parentWidthHalf:Number = parentAsteroid.width/2;				var parentHeightHalf:Number = parentAsteroid.height/2;				// Calculate the center of the child asteroid				var childWidthHalf:Number = asteroid[0].width/2;				var childHeightHalf:Number = asteroid[0].height/2;				// With these calculations set the beginning location of the child asteroid to be at the center of the destroyed parent				asteroid[0].x = parentAsteroid.x + parentWidthHalf - childWidthHalf;				asteroid[0].y = parentAsteroid.y + parentHeightHalf - childHeightHalf;			}		}					// A loop function to manage asteroid movement		// Function is ran on each frame		public function asteroidMovement():void{			// Loop through asteroid array			for(var i:uint = 0; i < asteroidArray.length; i++){				// Set asteroid properties according to those stored in the array				var speed:Number = asteroidArray[i][2];				var xVelocity:Number = asteroidArray[i][3];				var yVelocity:Number = asteroidArray[i][4];				// Update x/y coords accordingly				asteroidArray[i][0].x += xVelocity * speed;				asteroidArray[i][0].y += yVelocity * speed;			}		}			// A function to check location of asteroids on stage and to manage the bleed		public function asteroidLocation():void{			// Loop through asteroid array			for(var i:uint = 0; i < asteroidArray.length; i++){				// Set local variables				var xPosition:Number = asteroidArray[i][0].x + asteroidArray[i][0].width;				var yPosition:Number = asteroidArray[i][0].y + asteroidArray[i][0].height/2;				var halfStageBleed:Number = asteroidArray[i][8]/2;				// If asteroid goes of right hand side of stage, place on left side				if(asteroidArray[i][0].x > stage.stageWidth)					asteroidArray[i][0].x = -asteroidArray[i][8];				// If asteroid goes of left hand side of stage, place on right side				if(asteroidArray[i][0].x < -asteroidArray[i][8])					asteroidArray[i][0].x = stage.stageWidth;				// If asteroid goes of bottom side of stage, place on top side				if(asteroidArray[i][0].y > stage.stageHeight)					asteroidArray[i][0].y = -asteroidArray[i][8];				// If asteroid goes of top hand side of stage, place on bottom side				if(asteroidArray[i][0].y < -asteroidArray[i][8])					asteroidArray[i][0].y = stage.stageHeight;			}		}	}}