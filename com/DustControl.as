/**********************	Dust Control *** *******************//* Notes:** This class controls everything to do with the creation, destruction and movement of dust sprites (which simulate particles)*/package com{	// Import flash classes	import flash.events.*;	import flash.display.Stage;	import flash.display.Sprite;	// Import my classes	import com.Utilities;		// Extend a sprite since we don't need multiple frames	public class DustControl extends Sprite{		// General variables		private var utils:Utilities = new Utilities;		private var stageRef:Stage;		// Class specific variables		private var dustArray:Array = new Array();		private var maxDistance:Number = 30;		private var numDust:Number = 8;		private var distanceCounter:uint = 0;				// Constructor		public function DustControl(stageRef:Stage,asteroid:Object):void{			this.stageRef = stageRef;			// Draw dust sprites			drawDustSprite(asteroid);			// Create listener			this.addEventListener(Event.ENTER_FRAME,dustLoop);		}				// A loop function to manage the movement and destruction of dust sprites		public function dustLoop(evt:Event):void{			if(dustArray.length > 0){				// Loop through dust array				for(var i:int = 0; i < dustArray.length; i++){					// If dust goes of right hand side of stage, place on left side					if(dustArray[i][0].x > stageRef.stageWidth)						dustArray[i][0].x = 0;					// If dust goes of left hand side of stage, place on right side					if(dustArray[i][0].x < 0)						dustArray[i][0].x = stageRef.stageWidth;					// If dust goes of bottom side of stage, place on top side					if(dustArray[i][0].y > stageRef.stageHeight)						dustArray[i][0].y = 0;					// If dust goes of top hand side of stage, place on bottom side					if(dustArray[i][0].y < 0)						dustArray[i][0].y = stageRef.stageHeight;					// If dust counter reaches max number of frames					if(distanceCounter > maxDistance){						// Remove listener						removeEventListener(Event.ENTER_FRAME,dustLoop);						// Remove from display object list						stageRef.removeChild(dustArray[i][0]);					}					else {						// Keep moving the dust						dustArray[i][0].x+=dustArray[i][1]*5;						dustArray[i][0].y+=dustArray[i][2]*5;					}				}				// Increase counter				distanceCounter++;			}		}				// A function to draw dust sprites		public function drawDustSprite(asteroid:Object):void {					for(var i:uint = 0; i < numDust; i++){				// Set up local variables				var dustSprite = new Sprite();				var dustSpriteAngle:Number;				var dustSpriteYVel:Number;				var dustSpriteXVel:Number;				// Draw dust				dustSprite.graphics.lineStyle(1, 0xFFFFFF);				dustSprite.graphics.lineTo(0, 0);				dustSprite.graphics.lineTo(0, 1);				// Set dust properties				dustSpriteAngle = Math.random()*360;				dustSprite.rotation = dustSpriteAngle;				// Set x/y velocity of sprite				dustSpriteYVel = Math.sin(utils.degToRad(dustSpriteAngle));				dustSpriteXVel = Math.cos(utils.degToRad(dustSpriteAngle));					// Get center of parent asteroid				var parentWidthHalf:Number = asteroid.width/2;				var parentHeightHalf:Number = asteroid.height/2;				// Set initial x/y location of dust sprite				dustSprite.y = asteroid.y + parentHeightHalf;				dustSprite.x = asteroid.x + parentWidthHalf;				// Add to display object list				stageRef.addChild(dustSprite);				// Add to an array of dust objects and their properties				dustArray.push(new Array(dustSprite,dustSpriteXVel,dustSpriteYVel));			}		}	}}