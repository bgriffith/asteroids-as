/**************	Main *** ***********//* Notes:** This class is the document class**** Credits:** Background music: http://www.flashkit.com/loops/Ambient/Soundscapes/An_Invit-Lee_I_G-4123/index.php** Laser sound: http://www.therecordist.com/pages/game_sfx.html** Asteroid explosion: http://www.bricecarrington.com/Sound%20Files%20for%20BaidansMixer_Com/Explosions/** Ship explosion: http://www.therecordist.com/pages/game_sfx.html*/package com{	// Import flash classes	import flash.ui.Keyboard;	import flash.events.*;	import flash.display.*;	import flash.text.*;	import flash.media.SoundChannel;	import flash.media.Sound;	import flash.ui.Mouse;	import flash.events.TimerEvent;	import flash.utils.Timer;	// Import my classes	import com.HitControl;		public class Main extends MovieClip{		// Preloader		private var preloader:ThePreloader;		// Scene objects		public var shipClass:ShipControl;		public var asteroid:AsteroidControl;		public var bg:BackgroundControl;		// public var lifeClass:LifeControl; NOT IMPLEMENTED YET - DRAWS ICONS FOR PLAYERS LIVES		// Background variables		public var bgColor = '0x000000';		// Score variables		public var score:uint = 0;		public var scoreString:String = null;		public var scoreDisplay:TextField;		// Game variables		public var gameLivesLeft:int = 3;		public var livesDisplay:TextField;		public var livesString:String = null;				// Hit test object		public var hit:HitControl;		// Music related variables 		// Decided to remove background music		//private var backgroundMusic:BackgroundMusic;		//private var bgmSoundChannel:SoundChannel;		// Visible elements - text, buttons etc		private var asteroidText:AsteroidText;		private var buttonPlay:ButtonPlay;		private var buttonInstruct:ButtonInstruct;		private var buttonBack:ButtonBack;		private var buttonContinue:ButtonContinue;		private var instructScreen:InstructScreen;		private var gameOverText:GameOverText;		private var buttonRestart:ButtonRestart;		private var completeText:CompleteText;						public var gameLevel:uint = 1;		public var gameLevelComplete:Boolean = false;				// Constructor		public function Main():void{			// Run background setup			backgroundSetup();			// Create a new instance of the preloader			// Preloader taken and modified from:			// http://asgamer.com/2009/making-a-complete-flash-game-creating-understanding-the-preloader			preloader = new ThePreloader(this.loaderInfo);			// Add to display object list			stage.addChild(preloader);			// Set up a listener for when the preloader has completed loading			preloader.addEventListener("loadComplete", initGame);		}				// A function that is called after the preloader is complete		private function initGame(e:Event):void{			// Remove the preloader from the display object list			stage.removeChild(preloader);			// Skip over the assets held in frame 2 and start on frame 3			// This is part of the technique to store all assets in a MovieClip as part of the preloader			gotoAndStop(3);			// Set up the backgroud music			// Some code and logic for setting up music based on: 			// http://gamedev.michaeljameswilliams.com/2009/03/03/avoider-game-tutorial-9/			// Create a new instance of the background music class			//backgroundMusic = new BackgroundMusic();			// Play the background music			//bgmSoundChannel = backgroundMusic.play();			// Set up a listener to listen out for when the track ends			//bgmSoundChannel.addEventListener( Event.SOUND_COMPLETE, onBackgroundMusicFinished );			// Set up asteroids			asteroidSetup(gameLevel);			// Set listener to loop asteroid movement and location			stage.addEventListener(Event.ENTER_FRAME,loopAsteroid);			// Set up Asteroid's title text			asteroidText = new AsteroidText();			asteroidText.x = stage.stageWidth/2;			asteroidText.y = 150;			stage.addChild(asteroidText);				// Run play screen function.. brings up play screen buttons			showPlayScreen();		}				/* Decided to remove the background music..		// A function that is called once the background music track is complete		private function onBackgroundMusicFinished(evt:Event):void{			// Create another new instance of the music			bgmSoundChannel = backgroundMusic.play();			// Create a new listener for this instance			bgmSoundChannel.addEventListener(Event.SOUND_COMPLETE, onBackgroundMusicFinished);		}*/				/**********************************		*** Screens and menus functions ***		**********************************/			// These functions either set up screens or menus.. buttons etc				// A function to display the play screen once the preloader is loaded or if directed there from another screen		// Can be directed there automatically or by event listener		private function showPlayScreen(evt:Event = null):void{			// Clear stage if instructions screen was previous screen 			clearInstructScreen();			// Set up play button			buttonPlay = new ButtonPlay();			buttonPlay.x = stage.stageWidth/2;			buttonPlay.y = 200;			// Add to display object list			stage.addChild(buttonPlay);			// Set up instructions button			buttonInstruct = new ButtonInstruct();			buttonInstruct.x = stage.stageWidth/2;			buttonInstruct.y = 250;			// Add to display object list			stage.addChild(buttonInstruct);			// Set listener for the play button			buttonPlay.addEventListener(MouseEvent.MOUSE_UP,playGame);			// Set listener for the instructions button			buttonInstruct.addEventListener(MouseEvent.MOUSE_UP,showInstruction);		}				// A function to show the instruction screen when the event that calls		private function showInstruction(evt:Event):void{			// Clear stage if play screen was previous screen 			clearPlayScreen();			// Create new instance on the instruction screen movie clip			instructScreen = new InstructScreen();			instructScreen.x = 280;			instructScreen.y = 280;			// Add to display object list			stage.addChild(instructScreen);			// Set up back button			buttonBack = new ButtonBack();			buttonBack.x = 400;			buttonBack.y = 350;			// Add to display object list			stage.addChild(buttonBack);			// Set listener for back button			buttonBack.addEventListener(MouseEvent.MOUSE_UP,showPlayScreen);		}				// A function that gets called once the level is complete		private function completeGame():void{					// Increment game level			gameLevel++;			// Set boolean to true			gameLevelComplete = true;			// Show mouse cursor			Mouse.show();			// Set up complete text			completeText = new CompleteText();			completeText.x = stage.stageWidth/2;			completeText.y = 150;			// Add to display object list			stage.addChild(completeText);			// Set up continue button			buttonContinue = new ButtonContinue();			buttonContinue.x = stage.stageWidth/2;			buttonContinue.y = 200;			// Add to display object list			stage.addChild(buttonContinue);			// Set listener for restart button			buttonContinue.addEventListener(MouseEvent.MOUSE_UP,playGame);		}				/*****************************		*** Clear screen functions ***		*****************************/			// These functions clear any elements left over on stage				// A function to clear all elements that make up the play screen		private function clearPlayScreen():void{			// Check if the play button exists			if(buttonPlay){				// Remove from display object list				stage.removeChild(buttonPlay);				// Reset variable				buttonPlay = null;			}			// Check if the instructions button exists			if(buttonInstruct){				// Remove from display object list				stage.removeChild(buttonInstruct);				// Reset variable				buttonInstruct = null;			}		}				// A function to clear all elements that make up the instructions screen		private function clearInstructScreen():void{			// Checks if the instruction screen movie clip exists			if(instructScreen){				// Remove from display object list				stage.removeChild(instructScreen);				// Reset variable				instructScreen = null;			}			// Checks if the back button exists			if(buttonBack){				// Remove from display object list				stage.removeChild(buttonBack);				// Reset variable				buttonBack = null;			}		}				// A function to clear all elements to do with the player's score		private function clearScore():void{			// Reset the score			if(score)				score = 0;			// Checks if the score display object is on stage, remove it from the display object list			if(scoreDisplay){				// Remove from display object list				stage.removeChild(scoreDisplay);				// Reset variable				scoreDisplay = null;			}		}				// A function to clear all elements to do with the player's lives		private function clearLives():void{			// Reset the lives			gameLivesLeft = 3;				// Checks if the lives display object is on stage, remove it from the display object list			if(livesDisplay){				// Remove from display object list				stage.removeChild(livesDisplay);				// Reset variable				livesDisplay = null;			}		}				// A function to clear all elements to do with the restart / game over screen		private function clearRestartScreen(){			// Checks if the restart button exists			if(buttonRestart){				// Remove from display object list				stage.removeChild(buttonRestart);				// Reset variable				buttonRestart = null;			}			// Check if the game over text exists			if(gameOverText){				// Remove from display object list				stage.removeChild(gameOverText);				// Reset variable				gameOverText = null;			}		}				// A function to clear all elements to do with the complete screen		private function clearCompleteScreen():void{			// Checks if the continue button exists			if(buttonContinue){				// Remove from display object list				stage.removeChild(buttonContinue);				// Reset variable				buttonContinue = null;			}			// Checks if the complete text object exists			if(completeText){				// Remove from display object list				stage.removeChild(completeText);				// Reset variable				completeText = null;			}		}				// A function to clear the title text		private function clearTitleText():void{			// If asteroid title text exists			if(asteroidText){				// Remove from display object list				stage.removeChild(asteroidText);				// Reset variable				asteroidText = null;			}		}				/**************************************		*** Run and stop gameplay functions ***		**************************************/			// These functions start and stop gameplay				// A function that starts the actual gameplay		private function playGame(evt:Event):void{			// Remove ship if it exists				if(shipClass){				// Remove from display object list				stage.removeChild(shipClass.myShip);			}			// If you haven't just completed a level..			if(!gameLevelComplete){				// Clear the score (If you've failed..)				clearScore();				// Clear player lives				clearLives();			}			// Other clear up functions			clearInstructScreen();			clearPlayScreen();			clearRestartScreen();			clearCompleteScreen();			clearTitleText();			asteroid.clearAll();			// Fix focus to stage			stage.focus = null;			// Hide mouse cursor			Mouse.hide();			// If you haven't just completed a level..			if(!gameLevelComplete){				// Set up score display				scoreSetup();				// Set up life display				livesSetup();			}			// Run setup functions			shipSetup();			asteroidSetup(gameLevel);			asteroid.addRemoveAsteroid();						// Needs more work			//lifeSetup(gameLivesLeft);						// Add listener to do function on every frame			stage.addEventListener(Event.ENTER_FRAME,loopComplete);			stage.addEventListener(Event.ENTER_FRAME,loopKeys);			stage.addEventListener(Event.ENTER_FRAME,loopShip);			stage.addEventListener(Event.ENTER_FRAME,loopAsteroid);			stage.addEventListener(Event.ENTER_FRAME,loopCollision);		}				// A function that decreases the lives that a player has left and either reloads the ship or goes to the game over screen		public function removeLife(evt:TimerEvent):void{			// Decrease lives left			gameLivesLeft--;			// Update display			livesUpdate();			// If no lives left.. game over			if(gameLivesLeft == 0){				// Run stop game function				stopGame();			}			else			{				// If player has lives left, reload the ship and add the required listeners for collison and user input				// If ship class exists..				if(shipClass){					// Remove the ship mc from the display object list					stage.removeChild(shipClass.myShip);				}				// Set listeners for user input and collision				stage.addEventListener(Event.ENTER_FRAME,loopKeys);				stage.addEventListener(Event.ENTER_FRAME,loopCollision);				// Run ship setup functions				shipSetup();			}		}				// This function is called when the ship collides with an asteroid		public function stopGame(){			// Set level back to 1			gameLevel = 1;			// Set level complete flag to false			gameLevelComplete = false;			// Show mouse cursor			Mouse.show();			// Game over screen and text			// Some code and logic for the game over text taken and modified from:			// http://gamedev.michaeljameswilliams.com/2008/10/09/avoider-game-tutorial-3/			// Set up game over screen			gameOverText = new GameOverText();			gameOverText.x = stage.stageWidth/2;			gameOverText.y = 150;			// Add to display object list			stage.addChild(gameOverText);			// Set up restart button			buttonRestart = new ButtonRestart();			buttonRestart.x = stage.stageWidth/2;			buttonRestart.y = 200;			// Add to display object list			stage.addChild(buttonRestart);			// Set listern for restart button			buttonRestart.addEventListener(MouseEvent.MOUSE_UP,playGame);		}				/************************************		*** Key elements set up functions ***		************************************/			// These functions set up the key elements for the game by creating new instances of each class used		// and running the required functions				// Set up the ship		public function shipSetup(){			// New instance of ship control class			shipClass = new ShipControl(stage);			// Name the instance			shipClass.name = 'ShipClass';			// Add to display object list			stage.addChild(shipClass);				// Run required functions			shipClass.shipPlacement();			shipClass.shipListerners();		}				// NOT IMPLEMENTED YET - DRAWS ICONS FOR PLAYERS LIVES		// Set up the players lives		/*public function lifeSetup(livesLeft){			// New instance of ship control class			lifeClass = new LifeControl(stage,livesLeft);			// Name the instance			lifeClass.name = 'LifeClass';			// Add to display object list			stage.addChild(lifeClass);				// Run required functions			lifeClass.drawLives();		}*/				// Set up the asteroids		public function asteroidSetup(gameLevel:uint){			// New instance of asteroid control class			asteroid = new AsteroidControl(stage,gameLevel);			// Name the instance			asteroid.name = 'AsteroidClass';			// Add to display object list			stage.addChild(asteroid);		}				// Set up the background		public function backgroundSetup():void{			// New instance of background control class            bg = new BackgroundControl(bgColor);			// Name the instance			bg.name = 'Background';			// Add to display object list            stage.addChild(bg);			// Run function to draw background            bg.drawBackground();        }				/******************************		*** Score control functions ***		******************************/			// These functions control the way the score is formatted and displayed		// Note: These could/will be put into their own class..time permitting..				// A function to setup the formatting of the hud on stage		public function hudFormat():TextFormat{			var format:TextFormat = new TextFormat();			format.font = "Orator Std";			format.color = 0xffffff;			format.size = 16;			format.bold = true;			return format;		}				// A function to setup a dynamic text field which will hold the users score		public function scoreSetup():void{			// Create new text field instance			scoreDisplay = new TextField();			// Assign properties to text field			scoreDisplay.width = 200;			scoreDisplay.height = 20;			scoreDisplay.text = "Score: 0"			scoreDisplay.x = stage.stageWidth - 120;			scoreDisplay.y =  10;			// Use the returning value of the scoreFormat function to give scoreDisplay a format			scoreDisplay.setTextFormat(hudFormat());			// Add to display object list			stage.addChild(scoreDisplay);		}				// A function which is called everytime the score is updated		public function scoreUpdate(scoreIncrease:uint):void{			// Increase score by the value passed in			score += scoreIncrease;			// Convert to string			scoreString = score.toString();			scoreDisplay.text = 'Score: ' + scoreString;			// Set format			scoreDisplay.setTextFormat(hudFormat());		}								// A function to setup a dynamic text field which will hold the users score		public function livesSetup():void{			// Create new text field instance			livesDisplay = new TextField();			// Assign properties to text field			livesDisplay.width = 200;			livesDisplay.height = 20;			livesDisplay.text = "Lives: 3"			livesDisplay.x = 10;			livesDisplay.y =  10;			// Use the returning value of the scoreFormat function to give scoreDisplay a format			livesDisplay.setTextFormat(hudFormat());			// Add to display object list			stage.addChild(livesDisplay);		}				// A function which is called everytime the score is updated		public function livesUpdate():void{			// Convert to string			livesString = gameLivesLeft.toString();			livesDisplay.text = 'Lives: ' + livesString;			// Set format			livesDisplay.setTextFormat(hudFormat());		}				/*********************		*** Loop functions ***		*********************/		// These functions control loops in Main class				// A function that checks if all asteroids are destroyed		private function loopComplete(evt:Event){			// Check number of existing asteroids			var existingAsteroids:uint = 0;			// Loop through asteroid array			for(var i:uint = 0; i < asteroid.asteroidArray.length; i++){				// If destroyed flag is false, increment				if(asteroid.asteroidArray[i][6] == false)					existingAsteroids++;			}			// If there are no exisitng asteroids, level is complete			if(existingAsteroids == 0){				completeGame();				// Remove comeplete game listener				stage.removeEventListener(Event.ENTER_FRAME,loopComplete);			}		}				private function loopKeys(evt:Event){			// User input check loops			shipClass.checkKeys();		}				private function loopShip(evt:Event){			// Ship loops			shipClass.shipMovement();			shipClass.shipLocation();		}				private function loopAsteroid(evt:Event):void{			// Asteroids loops			asteroid.asteroidMovement();			asteroid.asteroidLocation();		}				private function loopCollision(evt:Event):void{			// Collision check loops			checkShipCollision();			checkLaserCollision();		}				/***********************************		*** Collision checking functions ***		***********************************/			// These functions check for collisions		// They do certain actions and run certain functions depending on the results		// Note: These could/will be put into their own class..time permitting..				// A function to check for a collision between the ship and an asteroid		public function checkShipCollision(){					// Loop through each asteroid						for(var i:uint = 0; i < asteroid.asteroidArray.length; i++){				// Create a hit test for ship vs asteroid				// If not destroyed				if(!asteroid.asteroidArray[i][6]) {					// Create new instance of hit control					hit = new HitControl(shipClass.myShip,asteroid.asteroidArray[i][0]);					// Return hit test result					if(hit.detectCollision()){						// Remove event listeners that we no longer need						stage.removeEventListener(Event.ENTER_FRAME,loopKeys);						stage.removeEventListener(Event.ENTER_FRAME,loopCollision);						// Create new instance of explosion sound						var explosionSound:ShipExplosion = new ShipExplosion; 						// Play explosion sound						explosionSound.play();						var myTimer:Timer = new Timer(2000,1);						myTimer.addEventListener(TimerEvent.TIMER, removeLife);						// Play crash animation						shipClass.myShip.gotoAndPlay(4);						myTimer.start();						}				}			}		}				// A function to check for a collision between a laser and an asteroid		public function checkLaserCollision(){				// First loop through each laser in the laser array			for(var j:uint = 0; j < shipClass.laserArray.length; j++){				// For each element in the laser array, loop through every asteroid				for(var i:uint = 0; i < asteroid.asteroidArray.length; i++){					// Create a hit test for laser vs asteroid					// If destroyed flag is false					if(!asteroid.asteroidArray[i][6]) {						hit = new HitControl(shipClass.laserArray[j],asteroid.asteroidArray[i][0]);						// Return hit test result						if(hit.detectCollision()){							// Create new instance of explosion sound							var asteroidExplodeSound:ExplodeSound = new ExplodeSound;							// Play explosion sound							asteroidExplodeSound.play();							// Check if laser class exists (is true)							if(shipClass.contains(shipClass.laserArray[j])){									// Destroy laser								shipClass.destroyLaserClass(shipClass.laserArray[j]);								// Update score by passed value								scoreUpdate(10);							}							// Destroy asteroid							asteroid.destroyAsteroid(asteroid.asteroidArray[i][1]);							asteroid.addRemoveAsteroid();						}					}				}			}		}	}}